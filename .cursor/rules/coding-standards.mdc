---
alwaysApply: true
---
- **TypeScript**: From `tsconfig.json` – baseUrl `@/*`, allowJs true, but prefer explicit types. Avoid `any` (warn via ESLint); use interfaces for props/data (e.g., `interface Equipment { id: string; ... }`). Define types in `src/types/` (e.g., `equipment.ts`).
- **ESLint**: Follow `eslint.config.js` – no unused vars/explicit any (warn), React hooks rules. Run `npm run lint` before commits. Use `typescript-eslint` for TS-specific rules.
- **Naming**: 
  - Variables/Functions: camelCase (e.g., `fetchEquipment`).
  - Components/Types: PascalCase (e.g., `EquipmentCard`).
  - Constants: UPPER_SNAKE_CASE (e.g., `DEFAULT_STALE_TIME`).
  - Queries: Descriptive TanStack keys (e.g., `['work-orders', orgId, status]`).
- **Error Handling**: Use try/catch in services; propagate via TanStack Query errors. Components: Show user-friendly messages (e.g., via `useAppToast`). Log with context (user/org ID).
- **Performance**: Memoize with `useMemo`/`useCallback`. Lazy-load routes/components. Limit re-renders with `React.memo`. In Supabase queries, use `select()` for specific fields to reduce payload.
- **Comments**: JSDoc for hooks/components. Reference docs for complex logic (e.g., "// See database-schema.md for RLS details").
