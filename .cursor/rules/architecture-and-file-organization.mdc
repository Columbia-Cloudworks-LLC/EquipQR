---
alwaysApply: true
---
- Follow the documented patterns in `docs/architecture/`:
  - **Component Hierarchy**: Pages in `src/pages/` (route-level, <300 LOC). Feature components in `src/components/[feature]/` (e.g., `equipment/`, `work-orders/`). UI primitives in `src/components/ui/` (shadcn-style, no business logic).
  - **Patterns**:
    - Container/Presentational: Containers handle data (e.g., `useEquipment` hook); presentational render UI.
    - Custom Hooks: For data fetching/mutations (e.g., `useEquipment(orgId)` with TanStack Query keys like `['equipment', orgId]`). Place in `src/hooks/`.
    - Compound Components: For flexible UIs (e.g., `EquipmentCard` with `Header`, `Title` sub-components via Context).
    - Services: Business logic in `src/services/` (e.g., `equipmentService.ts` with Supabase queries). Keep stateless.
  - **Data Flow**: Queries → Hooks → Components. Use optimistic updates in mutations. Real-time: Supabase subscriptions to invalidate/update Query cache.
  - **Multi-Tenancy**: Every query/mutation filters by `organization_id` from `OrganizationContext`. Use RLS policies; reference `docs/architecture/database-schema.md` for schema (e.g., `equipment`, `work_orders` tables).
  - **Contexts**: Use provided ones (AuthContext, OrganizationContext, SettingsContext). Wrap app in `AppProviders`.
- File Naming: Kebab-case for files/folders (e.g., `equipment-list.tsx`). PascalCase for components (e.g., `EquipmentList`). Use `.tsx` for components with JSX, `.ts` for utils/hooks/services.
- Structure Example:
  ```
  src/
  ├── components/
  │   ├── equipment/          # Feature-specific (e.g., EquipmentForm.tsx)
  │   └── ui/                 # Reusable primitives (e.g., Button.tsx)
  ├── contexts/               # Global state (e.g., AuthContext.tsx)
  ├── hooks/                  # Custom hooks (e.g., useEquipment.ts)
  ├── pages/                  # Route components (e.g., Equipment.tsx)
  ├── services/               # API logic (e.g., equipmentService.ts)
  └── utils/                  # Helpers (e.g., formatDate.ts)
  ```
- Ongoing: Follow the Supabase performance plan [[memory:8281322]] – consolidate RLS policies, add indexes (e.g., `idx_equipment_org_status`), and test queries.
