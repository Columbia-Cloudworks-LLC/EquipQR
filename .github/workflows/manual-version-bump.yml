name: Manual Version Bump

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create (e.g., 1.2.3 - without v prefix)'
        required: true
        type: string
      message:
        description: 'Release message (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ${{ vars.USE_SELF_HOSTED == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get current version and compute suggestions (Windows)
        if: runner.os == 'Windows'
        id: current-win
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $headTag = (git tag --points-at HEAD --list "v[0-9]*" | Select-Object -First 1)
          if (-not $headTag) {
            try {
              $headTag = git describe --tags --abbrev=0 --match "v[0-9]*"
            } catch {
              $headTag = 'v0.0.0'
            }
          }
          $current = $headTag.TrimStart('v')
          $parts = $current -split '\.'
          $major = [int]$parts[0]
          $minor = [int]$parts[1]
          $patch = [int]$parts[2]
          
          $nextMajor = "$($major + 1).0.0"
          $nextMinor = "$major.$($minor + 1).0"
          $nextPatch = "$major.$minor.$($patch + 1)"
          
          "current=$current" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "next_major=$nextMajor" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "next_minor=$nextMinor" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "next_patch=$nextPatch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Get current version and compute suggestions (Unix)
        if: runner.os != 'Windows'
        id: current
        shell: bash
        run: |
          HEAD_TAG=$(git tag --points-at HEAD --list "v[0-9]*" | head -n1)
          if [ -z "$HEAD_TAG" ]; then
            HEAD_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*" 2>/dev/null || echo "v0.0.0")
          fi
          CURRENT="${HEAD_TAG#v}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          
          NEXT_MAJOR="$((MAJOR+1)).0.0"
          NEXT_MINOR="$MAJOR.$((MINOR+1)).0"
          NEXT_PATCH="$MAJOR.$MINOR.$((PATCH+1))"
          
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          echo "next_major=$NEXT_MAJOR" >> $GITHUB_OUTPUT
          echo "next_minor=$NEXT_MINOR" >> $GITHUB_OUTPUT
          echo "next_patch=$NEXT_PATCH" >> $GITHUB_OUTPUT

      - name: Display version information
        shell: bash
        run: |
          CURRENT="${{ steps.current.outputs.current || steps.current-win.outputs.current }}"
          NEXT_MAJOR="${{ steps.current.outputs.next_major || steps.current-win.outputs.next_major }}"
          NEXT_MINOR="${{ steps.current.outputs.next_minor || steps.current-win.outputs.next_minor }}"
          NEXT_PATCH="${{ steps.current.outputs.next_patch || steps.current-win.outputs.next_patch }}"
          NEW_VERSION="${{ github.event.inputs.version }}"
          
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version:** \`$CURRENT\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Suggested Versions:**" >> $GITHUB_STEP_SUMMARY
          echo "- Major: \`$NEXT_MAJOR\`" >> $GITHUB_STEP_SUMMARY
          echo "- Minor: \`$NEXT_MINOR\`" >> $GITHUB_STEP_SUMMARY
          echo "- Patch: \`$NEXT_PATCH\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**New Version:** \`$NEW_VERSION\` ‚Üí \`v$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY

      - name: Validate version format (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $v = "${{ github.event.inputs.version }}"
          if ($v -notmatch '^[0-9]+\.[0-9]+\.[0-9]+$') {
            Write-Host '‚ùå Invalid version format. Expected format: X.Y.Z (e.g., 1.2.3)'
            exit 1
          }
          Write-Host "‚úÖ Version format is valid: $v"

      - name: Validate version format (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format. Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Check if tag exists (Windows)
        if: runner.os == 'Windows'
        id: check-tag-win
        shell: pwsh
        run: |
          $v = "v${{ github.event.inputs.version }}"
          git rev-parse $v *> $null
          if ($LASTEXITCODE -eq 0) {
            "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "‚ùå Tag $v already exists"
            exit 1
          } else {
            "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "‚úÖ Tag $v does not exist, proceeding..."
          }

      - name: Check if tag exists (Unix)
        if: runner.os != 'Windows'
        id: check-tag
        shell: bash
        run: |
          VERSION="v${{ github.event.inputs.version }}"
          if git rev-parse "$VERSION" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ùå Tag $VERSION already exists"
            exit 1
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag $VERSION does not exist, proceeding..."
          fi

      - name: Update package.json version
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "üìù Updating package.json to version $VERSION"
          npm pkg set version=$VERSION
          cat package.json | grep '"version"'

      - name: Commit version change (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $v = "${{ github.event.inputs.version }}"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: bump version to $v"
          Write-Host "‚úÖ Committed version change"

      - name: Commit version change (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: bump version to $VERSION"
          echo "‚úÖ Committed version change"

      - name: Create and push tag (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $v = "v${{ github.event.inputs.version }}"
          $m = "${{ github.event.inputs.message }}"
          if ([string]::IsNullOrWhiteSpace($m)) {
            $m = "Release $v"
          }
          Write-Host "üè∑Ô∏è  Creating tag: $v"
          git tag -a "$v" -m "$m"
          Write-Host "üì§ Pushing commit and tag to origin..."
          git push origin HEAD:${{ github.ref_name }}
          git push origin "$v"
          Write-Host "‚úÖ Successfully created and pushed tag: $v"

      - name: Create and push tag (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          VERSION="v${{ github.event.inputs.version }}"
          MESSAGE="${{ github.event.inputs.message }}"
          if [ -z "$MESSAGE" ]; then
            MESSAGE="Release $VERSION"
          fi
          
          echo "üè∑Ô∏è  Creating tag: $VERSION"
          git tag -a "$VERSION" -m "$MESSAGE"
          
          echo "üì§ Pushing commit and tag to origin..."
          git push origin HEAD:${{ github.ref_name }}
          git push origin "$VERSION"
          
          echo "‚úÖ Successfully created and pushed tag: $VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          generate_release_notes: true
          name: Release v${{ github.event.inputs.version }}
          body: ${{ github.event.inputs.message }}

      - name: Show recent tags (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "üìä Recent version tags:"
          git tag -l "v*" | sort -V | Select-Object -Last 10

      - name: Show recent tags (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "üìä Recent version tags:"
          git tag -l "v*" | sort -V | tail -10
