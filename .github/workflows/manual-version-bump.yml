name: Manual Version Bump

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create (e.g., v1.0.0)'
        required: true
        type: string
      message:
        description: 'Tag message'
        required: false
        type: string
        default: 'Manual version bump'

permissions:
  contents: write


jobs:
  create-tag:
    runs-on: ${{ vars.USE_SELF_HOSTED == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version format (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $v = "${{ github.event.inputs.version }}"
          if ($v -notmatch '^v[0-9]+\.[0-9]+\.[0-9]+$') {
            Write-Host '❌ Invalid version format. Expected format: v1.0.0'
            exit 1
          }
          Write-Host "✅ Version format is valid: $v"

      - name: Validate version format (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Expected format: v1.0.0"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if tag exists (Windows)
        if: runner.os == 'Windows'
        id: check-tag-win
        shell: pwsh
        run: |
          $v = "${{ github.event.inputs.version }}"
          git rev-parse $v *> $null
          if ($LASTEXITCODE -eq 0) {
            "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "⚠️  Tag $v already exists"
          } else {
            "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "✅ Tag $v does not exist, proceeding..."
          }

      - name: Check if tag exists (Unix)
        if: runner.os != 'Windows'
        id: check-tag
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git rev-parse "$VERSION" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Tag $VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag $VERSION does not exist, proceeding..."
          fi

      - name: Create tag (Windows)
        if: runner.os == 'Windows' && steps.check-tag-win.outputs.exists == 'false'
        shell: pwsh
        run: |
          $v = "${{ github.event.inputs.version }}"
          $m = "${{ github.event.inputs.message }}"
          Write-Host "🏷️  Creating tag: $v"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "$v" -m "$m"
          Write-Host "📤 Pushing tag to origin..."
          git push origin "$v"
          Write-Host "✅ Successfully created and pushed tag: $v"

      - name: Create tag (Unix)
        if: runner.os != 'Windows' && steps.check-tag.outputs.exists == 'false'
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MESSAGE="${{ github.event.inputs.message }}"
          
          echo "🏷️  Creating tag: $VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "$VERSION" -m "$MESSAGE"
          
          echo "📤 Pushing tag to origin..."
          git push origin "$VERSION"
          
          echo "✅ Successfully created and pushed tag: $VERSION"

      - name: Show current tags (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "📊 Current version tags:"
          git tag -l "v*" | sort -V | Select-Object -Last 10

      - name: Show current tags (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "📊 Current version tags:"
          git tag -l "v*" | sort -V | tail -10
