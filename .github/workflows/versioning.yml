name: Versioning

on:
  pull_request:
    types: [closed]

permissions:
  contents: write

env:
  MAIN_BRANCH: main
  PREVIEW_BRANCH: preview
  TAG_PREFIX: v

jobs:
  bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Determine last tag
        id: last
        shell: bash
        run: |
          set -e
          LAST_TAG=$(git describe --tags --abbrev=0 --match "${TAG_PREFIX}[0-9]*" 2>/dev/null || echo "${TAG_PREFIX}0.0.0")
          echo "last_tag=${LAST_TAG}" >> $GITHUB_OUTPUT

      - name: Decide bump type
        id: bump
        shell: bash
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          HEAD="${{ github.event.pull_request.head.ref }}"
          PREVIEW="${{ env.PREVIEW_BRANCH }}"
          MAIN="${{ env.MAIN_BRANCH }}"

          if [ "$BASE" = "$PREVIEW" ]; then
            BUMP="minor"
          elif [ "$BASE" = "$MAIN" ]; then
            if [ "$HEAD" = "$PREVIEW" ]; then
              BUMP="major"
            else
              BUMP="patch"
            fi
          else
            echo "Unsupported base branch '$BASE' â€“ skipping."; echo "skip=true" >> $GITHUB_OUTPUT; exit 0
          fi

          echo "bump_type=${BUMP}" >> $GITHUB_OUTPUT

      - name: Compute new version
        if: steps.bump.outputs.skip != 'true'
        id: newver
        shell: bash
        env:
          LAST: ${{ steps.last.outputs.last_tag }}
          BUMP: ${{ steps.bump.outputs.bump_type }}
          TAG_PREFIX: ${{ env.TAG_PREFIX }}
        run: |
          set -e
          V="${LAST#${TAG_PREFIX}}"
          IFS='.' read -r MA MI PA <<< "$V"
          case "$BUMP" in
            major) MA=$((MA+1)); MI=0; PA=0;;
            minor) MI=$((MI+1)); PA=0;;
            patch) PA=$((PA+1));;
          esac
          NEW="${TAG_PREFIX}${MA}.${MI}.${PA}"
          echo "new_tag=${NEW}" >> $GITHUB_OUTPUT

      - name: Guard if tag exists already
        if: steps.bump.outputs.skip != 'true'
        shell: bash
        env:
          NEW: ${{ steps.newver.outputs.new_tag }}
        run: |
          if git rev-parse "$NEW" >/dev/null 2>&1; then
            echo "Tag $NEW already exists. Exiting."; exit 0
          fi

      - name: Create and push tag
        if: steps.bump.outputs.skip != 'true'
        shell: bash
        env:
          NEW: ${{ steps.newver.outputs.new_tag }}
        run: |
          git tag -a "$NEW" -m "Automated version bump to $NEW"
          git push origin "$NEW"

      - name: Output summary
        if: steps.bump.outputs.skip != 'true'
        run: |
          echo "Bumped to ${{ steps.newver.outputs.new_tag }}"
