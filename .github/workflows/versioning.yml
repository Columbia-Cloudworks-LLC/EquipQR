name: Versioning

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - preview

permissions:
  contents: write

concurrency:
  group: versioning-${{ github.event.pull_request.base.ref }}
  cancel-in-progress: false

jobs:
  bump-and-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Switch to base branch
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          echo "Switching to base branch: $BASE"
          git fetch origin "$BASE" --prune
          git checkout -B "$BASE" "origin/$BASE"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Determine bump type
        id: bump
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          HEAD="${{ github.event.pull_request.head.ref }}"
          
          echo "Base branch: $BASE"
          echo "Head branch: $HEAD"
          
          if [ "$BASE" = "preview" ] && [[ "$HEAD" != "preview" ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "Bump type: MINOR (feature → preview)"
          elif [ "$BASE" = "main" ] && [ "$HEAD" = "preview" ]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "Bump type: MAJOR (preview → main)"
          elif [ "$BASE" = "main" ]; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "Bump type: PATCH (hotfix → main)"
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "Bump type: PATCH (default)"
          fi

      - name: Compute next version from latest tag
        id: semver
        run: |
          LATEST=$(git describe --tags --abbrev=0 --match "v[0-9]*" 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST"
          
          V=${LATEST#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$V"
          
          case "${{ steps.bump.outputs.type }}" in
            major)
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR+1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH+1))
              ;;
          esac
          
          NEXT="$MAJOR.$MINOR.$PATCH"
          echo "next=$NEXT" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT"

      - name: Update package.json version
        id: version_update
        run: |
          echo "Updating package.json to version ${{ steps.semver.outputs.next }}"
          npm pkg set version=${{ steps.semver.outputs.next }}
          if git diff --quiet -- package.json; then
            echo "No version change (already at target). Skipping push/tag."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          git add package.json
          git commit -m "chore: bump version to ${{ steps.semver.outputs.next }} [skip ci]"
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Push commit to base branch
        if: steps.version_update.outputs.skip != 'true'
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          echo "Pushing to branch: $BASE"
          git push origin HEAD:"refs/heads/$BASE"

      - name: Create and push tag
        if: steps.version_update.outputs.skip != 'true'
        run: |
          TAG="v${{ steps.semver.outputs.next }}"
          echo "Creating tag: $TAG"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        if: steps.version_update.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semver.outputs.next }}
          generate_release_notes: true
          name: Release v${{ steps.semver.outputs.next }}
