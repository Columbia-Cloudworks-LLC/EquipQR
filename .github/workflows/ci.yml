name: Continuous Integration

on:
  pull_request:
    branches: [ main, preview ]
  push:
    branches: [ main, preview ]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: 20.x
  CACHE_VERSION: v1

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: self-hosted
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-
          
    - name: Enforce npm usage
      run: |
        if [ -f "yarn.lock" ] || [ -f "pnpm-lock.yaml" ]; then
          echo "Detected non-npm lockfile. This project uses npm only."
          exit 1
        fi
        
    - name: Install dependencies (with fallback)
      run: |
        set -e
        npm ci --prefer-offline --no-audit || (rm -f package-lock.json && npm install --package-lock-only --no-audit && npm ci --prefer-offline --no-audit)

    - name: Run ESLint
      run: npx eslint . --format=json --output-file=eslint-report.json
      continue-on-error: true
      
    - name: Annotate ESLint Results
      uses: ataylorme/eslint-annotate-action@v3
      if: always()
      with:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        report-json: "eslint-report.json"
        
    - name: Run type check
      run: npx tsc --noEmit

  test:
    name: Test Suite
    runs-on: self-hosted
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-${{ env.CACHE_VERSION }}-
          
    - name: Enforce npm usage
      run: |
        if [ -f "yarn.lock" ] || [ -f "pnpm-lock.yaml" ]; then
          echo "Detected non-npm lockfile. This project uses npm only."
          exit 1
        fi
        
    - name: Install dependencies (with fallback)
      run: |
        set -e
        npm ci --prefer-offline --no-audit || (rm -f package-lock.json && npm install --package-lock-only --no-audit && npm ci --prefer-offline --no-audit)

    - name: Run tests with coverage
      run: node scripts/test-ci.mjs
      env:
        COVERAGE_BASELINE: 70
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest  # Keep security scans on GitHub-hosted for isolation
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-
          
    - name: Enforce npm usage
      run: |
        if [ -f "yarn.lock" ] || [ -f "pnpm-lock.yaml" ]; then
          echo "Detected non-npm lockfile. This project uses npm only."
          exit 1
        fi
        
    - name: Install dependencies (with fallback)
      run: |
        set -e
        npm ci --prefer-offline --no-audit || (rm -f package-lock.json && npm install --package-lock-only --no-audit && npm ci --prefer-offline --no-audit)

    - name: Run enhanced security audit
      run: npx npm-audit-ci --moderate
      continue-on-error: true
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

  build:
    name: Build & Bundle Analysis
    runs-on: self-hosted  # Use self-hosted for faster builds
    timeout-minutes: 15
    needs: [lint-and-typecheck]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-
          
    - name: Enforce npm usage
      run: |
        if [ -f "yarn.lock" ] || [ -f "pnpm-lock.yaml" ]; then
          echo "Detected non-npm lockfile. This project uses npm only."
          exit 1
        fi
        
    - name: Install dependencies (with fallback)
      run: |
        set -e
        npm ci --prefer-offline --no-audit || (rm -f package-lock.json && npm install --package-lock-only --no-audit && npm ci --prefer-offline --no-audit)

    - name: Cache build output
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
        
    - name: Ensure tags available
      run: git fetch --tags --force

    - name: Derive app version from tags
      id: ver
      shell: bash
      run: |
        HEAD_TAG=$(git tag --points-at HEAD --list "v[0-9]*" | head -n1)
        if [ -z "$HEAD_TAG" ]; then
          HEAD_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*" 2>/dev/null || echo "v0.0.0")
        fi
        echo "APP_VERSION=${HEAD_TAG#v}" >> $GITHUB_ENV
        echo "APP_VERSION=${HEAD_TAG#v}" >> $GITHUB_OUTPUT
        echo "üìä Version Information:"
        echo "  HEAD tag: $HEAD_TAG"
        echo "  App version: ${HEAD_TAG#v}"
        echo "  All version tags:"
        git tag -l "v*" | sort -V | tail -5

    - name: Export public env for Vite
      run: echo "VITE_APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

    - name: Build application
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_APP_VERSION: ${{ env.VITE_APP_VERSION }}
        
    - name: Analyze bundle size
      run: npx size-limit
      continue-on-error: true
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  quality-gates:
    name: Quality Gates
    runs-on: self-hosted  # Use self-hosted for final checks
    needs: [test, security, build]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-
          
    - name: Enforce npm usage
      run: |
        if [ -f "yarn.lock" ] || [ -f "pnpm-lock.yaml" ]; then
          echo "Detected non-npm lockfile. This project uses npm only."
          exit 1
        fi
        
    - name: Install dependencies (with fallback)
      run: |
        set -e
        npm ci --prefer-offline --no-audit || (rm -f package-lock.json && npm install --package-lock-only --no-audit && npm ci --prefer-offline --no-audit)

    - name: Restore build cache
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
        
    - name: Check test coverage threshold
      run: node scripts/test-ci.mjs
      env:
        COVERAGE_BASELINE: 70
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Check bundle size limits
      run: |
        if [ ! -d "dist" ]; then
          echo "Build directory not found, running build..."
          npm run build
        fi
        
        build_size=$(du -sb dist/ | cut -f1)
        max_size=$((12 * 1024 * 1024)) # 12MB in bytes
        
        echo "Build size: $(($build_size / 1024 / 1024))MB"
        echo "Maximum allowed: $(($max_size / 1024 / 1024))MB"
        
        if [ $build_size -gt $max_size ]; then
          echo "‚ùå Build size $(($build_size / 1024 / 1024))MB exceeds maximum of $(($max_size / 1024 / 1024))MB"
          echo "Large files in build:"
          find dist/ -type f -size +1M -exec du -sh {} \; | sort -hr | head -10
          exit 1
        fi
        echo "‚úÖ Build size within limits!"
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Performance budget check
      run: |
        echo "üìä Performance Analysis:"
        echo "JavaScript bundles:"
        find dist/assets -name "*.js" -exec du -sh {} \; | sort -hr | head -5
        echo "CSS bundles:"
        find dist/assets -name "*.css" -exec du -sh {} \; | sort -hr | head -3
        echo "Images:"
        find dist -name "*.png" -o -name "*.jpg" -o -name "*.svg" | wc -l | xargs echo "Image count:"
        
    - name: Check gzipped JS bundle sizes
      run: |
        if [ ! -d "dist" ]; then
          echo "Build directory not found, running build..."
          npm run build
        fi
        
        echo "üì¶ Checking gzipped JavaScript bundle sizes:"
        max_gzip_size=512000 # 500KB in bytes
        failed=false
        
        for js_file in dist/assets/*.js; do
          if [ -f "$js_file" ]; then
            gzip_size=$(gzip -c "$js_file" | wc -c)
            size_kb=$((gzip_size / 1024))
            filename=$(basename "$js_file")
            
            echo "  $filename: ${size_kb}KB (gzipped)"
            
            if [ $gzip_size -gt $max_gzip_size ]; then
              echo "::error file=$js_file::Gzipped JS bundle $filename (${size_kb}KB) exceeds 500KB limit"
              failed=true
            fi
          fi
        done
        
        if [ "$failed" = true ]; then
          echo "‚ùå One or more JS bundles exceed the 500KB gzipped size limit"
          exit 1
        fi
        echo "‚úÖ All JS bundles within 500KB gzipped limit"
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Success notification
      run: |
        echo "üéâ All quality gates passed!"
        echo "‚úÖ Linting and type checking passed"
        echo "‚úÖ All tests passed with sufficient coverage" 
        echo "‚úÖ Security scan completed"
        echo "‚úÖ Build completed successfully"
        echo "‚úÖ Bundle size within limits"